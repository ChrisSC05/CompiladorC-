//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/chris/OneDrive/Documentos/Proyectos Git/Proyecto 2 Bases 2/CompiladorC-/AlphaParser/AlphaCompiler/AlphaParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class AlphaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		CLASS=1, IF=2, ELSE=3, FOR=4, WHILE=5, BREAK=6, RETURN=7, READ=8, VOID=9, 
		NEW=10, PRINT=11, NULL=12, CONST=13, VAR=14, INT=15, FLOAT_T=16, DOUBLE_T=17, 
		BOOL=18, CHAR_T=19, STRING_T=20, INC=21, DEC=22, OR=23, AND=24, EQ=25, 
		NEQ=26, GTEQ=27, LTEQ=28, GT=29, LT=30, ASSIGN=31, PLUS=32, MINUS=33, 
		STAR=34, DIV=35, MOD=36, LBRACE=37, RBRACE=38, LPAREN=39, RPAREN=40, LBRACK=41, 
		RBRACK=42, SEMI=43, COMMA=44, DOT=45, INTLITERAL=46, FLOATLITERAL=47, 
		CHARLITERAL=48, STRINGLITERAL=49, BOOLEANLITERAL=50, IDENT=51, LINE_COMMENT=52, 
		BLOCK_COMMENT=53, WS=54;
	public const int
		RULE_program = 0, RULE_classDecl = 1, RULE_classBody = 2, RULE_varDecl = 3, 
		RULE_constDecl = 4, RULE_methodDecl = 5, RULE_formPars = 6, RULE_type = 7, 
		RULE_statement = 8, RULE_block = 9, RULE_actPars = 10, RULE_condition = 11, 
		RULE_condTerm = 12, RULE_condFact = 13, RULE_expr = 14, RULE_term = 15, 
		RULE_factor = 16, RULE_cast = 17, RULE_designator = 18, RULE_relop = 19, 
		RULE_addop = 20, RULE_mulop = 21, RULE_printStmt = 22;
	public static readonly string[] ruleNames = {
		"program", "classDecl", "classBody", "varDecl", "constDecl", "methodDecl", 
		"formPars", "type", "statement", "block", "actPars", "condition", "condTerm", 
		"condFact", "expr", "term", "factor", "cast", "designator", "relop", "addop", 
		"mulop", "printStmt"
	};

	private static readonly string[] _LiteralNames = {
		null, "'class'", "'if'", "'else'", "'for'", "'while'", "'break'", "'return'", 
		"'read'", "'void'", "'new'", "'print'", "'null'", "'const'", "'var'", 
		"'int'", "'float'", "'double'", "'bool'", "'char'", "'string'", "'++'", 
		"'--'", "'||'", "'&&'", "'=='", "'!='", "'>='", "'<='", "'>'", "'<'", 
		"'='", "'+'", "'-'", "'*'", "'/'", "'%'", "'{'", "'}'", "'('", "')'", 
		"'['", "']'", "';'", "','", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CLASS", "IF", "ELSE", "FOR", "WHILE", "BREAK", "RETURN", "READ", 
		"VOID", "NEW", "PRINT", "NULL", "CONST", "VAR", "INT", "FLOAT_T", "DOUBLE_T", 
		"BOOL", "CHAR_T", "STRING_T", "INC", "DEC", "OR", "AND", "EQ", "NEQ", 
		"GTEQ", "LTEQ", "GT", "LT", "ASSIGN", "PLUS", "MINUS", "STAR", "DIV", 
		"MOD", "LBRACE", "RBRACE", "LPAREN", "RPAREN", "LBRACK", "RBRACK", "SEMI", 
		"COMMA", "DOT", "INTLITERAL", "FLOATLITERAL", "CHARLITERAL", "STRINGLITERAL", 
		"BOOLEANLITERAL", "IDENT", "LINE_COMMENT", "BLOCK_COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AlphaParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AlphaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AlphaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AlphaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(AlphaParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclContext[] classDecl() {
			return GetRuleContexts<ClassDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclContext classDecl(int i) {
			return GetRuleContext<ClassDeclContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CLASS) {
				{
				{
				State = 46;
				classDecl();
				}
				}
				State = 51;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 52;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(AlphaParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(AlphaParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(AlphaParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(AlphaParser.RBRACE, 0); }
		public ClassDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterClassDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitClassDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclContext classDecl() {
		ClassDeclContext _localctx = new ClassDeclContext(Context, State);
		EnterRule(_localctx, 2, RULE_classDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			Match(CLASS);
			State = 55;
			Match(IDENT);
			State = 56;
			Match(LBRACE);
			State = 57;
			classBody();
			State = 58;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstDeclContext[] constDecl() {
			return GetRuleContexts<ConstDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstDeclContext constDecl(int i) {
			return GetRuleContext<ConstDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclContext[] methodDecl() {
			return GetRuleContexts<MethodDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclContext methodDecl(int i) {
			return GetRuleContext<MethodDeclContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 4, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2251799815758336L) != 0)) {
				{
				State = 63;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
				case 1:
					{
					State = 60;
					varDecl();
					}
					break;
				case 2:
					{
					State = 61;
					constDecl();
					}
					break;
				case 3:
					{
					State = 62;
					methodDecl();
					}
					break;
				}
				}
				State = 67;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENT() { return GetTokens(AlphaParser.IDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT(int i) {
			return GetToken(AlphaParser.IDENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(AlphaParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AlphaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AlphaParser.COMMA, i);
		}
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 6, RULE_varDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			type();
			State = 69;
			Match(IDENT);
			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 70;
				Match(COMMA);
				State = 71;
				Match(IDENT);
				}
				}
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 77;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(AlphaParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(AlphaParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(AlphaParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(AlphaParser.SEMI, 0); }
		public ConstDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterConstDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitConstDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstDeclContext constDecl() {
		ConstDeclContext _localctx = new ConstDeclContext(Context, State);
		EnterRule(_localctx, 8, RULE_constDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			Match(CONST);
			State = 80;
			type();
			State = 81;
			Match(IDENT);
			State = 82;
			Match(ASSIGN);
			State = 83;
			expr();
			State = 84;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(AlphaParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AlphaParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AlphaParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(AlphaParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormParsContext formPars() {
			return GetRuleContext<FormParsContext>(0);
		}
		public MethodDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterMethodDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitMethodDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclContext methodDecl() {
		MethodDeclContext _localctx = new MethodDeclContext(Context, State);
		EnterRule(_localctx, 10, RULE_methodDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
			case FLOAT_T:
			case DOUBLE_T:
			case BOOL:
			case CHAR_T:
			case STRING_T:
			case IDENT:
				{
				State = 86;
				type();
				}
				break;
			case VOID:
				{
				State = 87;
				Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 90;
			Match(IDENT);
			State = 91;
			Match(LPAREN);
			State = 93;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2251799815749632L) != 0)) {
				{
				State = 92;
				formPars();
				}
			}

			State = 95;
			Match(RPAREN);
			State = 96;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormParsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENT() { return GetTokens(AlphaParser.IDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT(int i) {
			return GetToken(AlphaParser.IDENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AlphaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AlphaParser.COMMA, i);
		}
		public FormParsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formPars; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterFormPars(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitFormPars(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormPars(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormParsContext formPars() {
		FormParsContext _localctx = new FormParsContext(Context, State);
		EnterRule(_localctx, 12, RULE_formPars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			type();
			State = 99;
			Match(IDENT);
			State = 106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 100;
				Match(COMMA);
				State = 101;
				type();
				State = 102;
				Match(IDENT);
				}
				}
				State = 108;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(AlphaParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_T() { return GetToken(AlphaParser.CHAR_T, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(AlphaParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_T() { return GetToken(AlphaParser.FLOAT_T, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_T() { return GetToken(AlphaParser.DOUBLE_T, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_T() { return GetToken(AlphaParser.STRING_T, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(AlphaParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(AlphaParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(AlphaParser.RBRACK, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 14, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2251799815749632L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 112;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 110;
				Match(LBRACK);
				State = 111;
				Match(RBRACK);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IncStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC() { return GetToken(AlphaParser.INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(AlphaParser.SEMI, 0); }
		public IncStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterIncStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitIncStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmptyStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(AlphaParser.SEMI, 0); }
		public EmptyStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterEmptyStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitEmptyStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DecStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(AlphaParser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(AlphaParser.SEMI, 0); }
		public DecStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterDecStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitDecStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public BlockStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(AlphaParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AlphaParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(AlphaParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(AlphaParser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AlphaParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ForStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BreakStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(AlphaParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(AlphaParser.SEMI, 0); }
		public BreakStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReadStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(AlphaParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AlphaParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AlphaParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(AlphaParser.SEMI, 0); }
		public ReadStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterReadStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitReadStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AlphaParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AlphaParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(AlphaParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActParsContext actPars() {
			return GetRuleContext<ActParsContext>(0);
		}
		public CallStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(AlphaParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AlphaParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AlphaParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(AlphaParser.ELSE, 0); }
		public IfStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(AlphaParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(AlphaParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(AlphaParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AlphaParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AlphaParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrintStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrintStmtContext printStmt() {
			return GetRuleContext<PrintStmtContext>(0);
		}
		public PrintStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterPrintStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitPrintStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(AlphaParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(AlphaParser.SEMI, 0); }
		public AssignStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterAssignStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitAssignStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_statement);
		int _la;
		try {
			State = 181;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				_localctx = new AssignStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 114;
				designator();
				State = 115;
				Match(ASSIGN);
				State = 116;
				expr();
				State = 117;
				Match(SEMI);
				}
				break;
			case 2:
				_localctx = new CallStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 119;
				designator();
				State = 120;
				Match(LPAREN);
				State = 122;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4433789228946432L) != 0)) {
					{
					State = 121;
					actPars();
					}
				}

				State = 124;
				Match(RPAREN);
				State = 125;
				Match(SEMI);
				}
				break;
			case 3:
				_localctx = new IncStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 127;
				designator();
				State = 128;
				Match(INC);
				State = 129;
				Match(SEMI);
				}
				break;
			case 4:
				_localctx = new DecStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 131;
				designator();
				State = 132;
				Match(DEC);
				State = 133;
				Match(SEMI);
				}
				break;
			case 5:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 135;
				Match(IF);
				State = 136;
				Match(LPAREN);
				State = 137;
				condition();
				State = 138;
				Match(RPAREN);
				State = 139;
				statement();
				State = 142;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
				case 1:
					{
					State = 140;
					Match(ELSE);
					State = 141;
					statement();
					}
					break;
				}
				}
				break;
			case 6:
				_localctx = new ForStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 144;
				Match(FOR);
				State = 145;
				Match(LPAREN);
				State = 147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4433789228946432L) != 0)) {
					{
					State = 146;
					expr();
					}
				}

				State = 149;
				Match(SEMI);
				State = 151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4433789228946432L) != 0)) {
					{
					State = 150;
					condition();
					}
				}

				State = 153;
				Match(SEMI);
				State = 155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4433789228946432L) != 0)) {
					{
					State = 154;
					expr();
					}
				}

				State = 157;
				Match(RPAREN);
				State = 158;
				statement();
				}
				break;
			case 7:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 159;
				Match(WHILE);
				State = 160;
				Match(LPAREN);
				State = 161;
				condition();
				State = 162;
				Match(RPAREN);
				State = 163;
				statement();
				}
				break;
			case 8:
				_localctx = new BreakStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 165;
				Match(BREAK);
				State = 166;
				Match(SEMI);
				}
				break;
			case 9:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 167;
				Match(RETURN);
				State = 169;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4433789228946432L) != 0)) {
					{
					State = 168;
					expr();
					}
				}

				State = 171;
				Match(SEMI);
				}
				break;
			case 10:
				_localctx = new ReadStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 172;
				Match(READ);
				State = 173;
				Match(LPAREN);
				State = 174;
				designator();
				State = 175;
				Match(RPAREN);
				State = 176;
				Match(SEMI);
				}
				break;
			case 11:
				_localctx = new PrintStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 178;
				printStmt();
				}
				break;
			case 12:
				_localctx = new BlockStatementContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 179;
				block();
				}
				break;
			case 13:
				_localctx = new EmptyStatementContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 180;
				Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(AlphaParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(AlphaParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstDeclContext[] constDecl() {
			return GetRuleContexts<ConstDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstDeclContext constDecl(int i) {
			return GetRuleContext<ConstDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 18, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			Match(LBRACE);
			State = 189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2260733347736052L) != 0)) {
				{
				State = 187;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
				case 1:
					{
					State = 184;
					varDecl();
					}
					break;
				case 2:
					{
					State = 185;
					constDecl();
					}
					break;
				case 3:
					{
					State = 186;
					statement();
					}
					break;
				}
				}
				State = 191;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 192;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActParsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AlphaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AlphaParser.COMMA, i);
		}
		public ActParsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actPars; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterActPars(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitActPars(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActPars(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActParsContext actPars() {
		ActParsContext _localctx = new ActParsContext(Context, State);
		EnterRule(_localctx, 20, RULE_actPars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			expr();
			State = 199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 195;
				Match(COMMA);
				State = 196;
				expr();
				}
				}
				State = 201;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CondTermContext[] condTerm() {
			return GetRuleContexts<CondTermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondTermContext condTerm(int i) {
			return GetRuleContext<CondTermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(AlphaParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(AlphaParser.OR, i);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 22, RULE_condition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			condTerm();
			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 203;
				Match(OR);
				State = 204;
				condTerm();
				}
				}
				State = 209;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CondFactContext[] condFact() {
			return GetRuleContexts<CondFactContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondFactContext condFact(int i) {
			return GetRuleContext<CondFactContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(AlphaParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(AlphaParser.AND, i);
		}
		public CondTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterCondTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitCondTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondTermContext condTerm() {
		CondTermContext _localctx = new CondTermContext(Context, State);
		EnterRule(_localctx, 24, RULE_condTerm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			condFact();
			State = 215;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 211;
				Match(AND);
				State = 212;
				condFact();
				}
				}
				State = 217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondFactContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelopContext relop() {
			return GetRuleContext<RelopContext>(0);
		}
		public CondFactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condFact; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterCondFact(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitCondFact(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondFact(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondFactContext condFact() {
		CondFactContext _localctx = new CondFactContext(Context, State);
		EnterRule(_localctx, 26, RULE_condFact);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			expr();
			State = 219;
			relop();
			State = 220;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnaryExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(AlphaParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CastContext cast() {
			return GetRuleContext<CastContext>(0);
		}
		public UnaryExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterUnaryExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitUnaryExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddopContext[] addop() {
			return GetRuleContexts<AddopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddopContext addop(int i) {
			return GetRuleContext<AddopContext>(i);
		}
		public BinaryExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterBinaryExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitBinaryExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 28, RULE_expr);
		int _la;
		try {
			State = 236;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MINUS:
				_localctx = new UnaryExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 222;
				Match(MINUS);
				State = 224;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
				case 1:
					{
					State = 223;
					cast();
					}
					break;
				}
				State = 226;
				term();
				}
				break;
			case NEW:
			case NULL:
			case LPAREN:
			case INTLITERAL:
			case FLOATLITERAL:
			case CHARLITERAL:
			case STRINGLITERAL:
			case BOOLEANLITERAL:
			case IDENT:
				_localctx = new BinaryExprContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 227;
				term();
				State = 233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==PLUS || _la==MINUS) {
					{
					{
					State = 228;
					addop();
					State = 229;
					term();
					}
					}
					State = 235;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	 
		public TermContext() { }
		public virtual void CopyFrom(TermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TermExprContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MulopContext[] mulop() {
			return GetRuleContexts<MulopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MulopContext mulop(int i) {
			return GetRuleContext<MulopContext>(i);
		}
		public TermExprContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterTermExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitTermExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 30, RULE_term);
		int _la;
		try {
			_localctx = new TermExprContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			factor();
			State = 244;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 120259084288L) != 0)) {
				{
				{
				State = 239;
				mulop();
				State = 240;
				factor();
				}
				}
				State = 246;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
	 
		public FactorContext() { }
		public virtual void CopyFrom(FactorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CallFactorContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AlphaParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AlphaParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActParsContext actPars() {
			return GetRuleContext<ActParsContext>(0);
		}
		public CallFactorContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterCallFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitCallFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallFactor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntFactorContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(AlphaParser.INTLITERAL, 0); }
		public IntFactorContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterIntFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitIntFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntFactor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CharFactorContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARLITERAL() { return GetToken(AlphaParser.CHARLITERAL, 0); }
		public CharFactorContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterCharFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitCharFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharFactor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringFactorContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(AlphaParser.STRINGLITERAL, 0); }
		public StringFactorContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterStringFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitStringFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringFactor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DesignatorFactorContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		public DesignatorFactorContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterDesignatorFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitDesignatorFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignatorFactor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewArrayFactorContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(AlphaParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(AlphaParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(AlphaParser.RBRACK, 0); }
		public NewArrayFactorContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterNewArrayFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitNewArrayFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewArrayFactor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullFactorContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(AlphaParser.NULL, 0); }
		public NullFactorContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterNullFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitNullFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullFactor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolFactorContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEANLITERAL() { return GetToken(AlphaParser.BOOLEANLITERAL, 0); }
		public BoolFactorContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterBoolFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitBoolFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolFactor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GroupFactorContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AlphaParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AlphaParser.RPAREN, 0); }
		public GroupFactorContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterGroupFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitGroupFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupFactor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatFactorContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOATLITERAL() { return GetToken(AlphaParser.FLOATLITERAL, 0); }
		public FloatFactorContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterFloatFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitFloatFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 32, RULE_factor);
		int _la;
		try {
			State = 271;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				_localctx = new CallFactorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 247;
				designator();
				State = 248;
				Match(LPAREN);
				State = 250;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4433789228946432L) != 0)) {
					{
					State = 249;
					actPars();
					}
				}

				State = 252;
				Match(RPAREN);
				}
				break;
			case 2:
				_localctx = new DesignatorFactorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 254;
				designator();
				}
				break;
			case 3:
				_localctx = new IntFactorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 255;
				Match(INTLITERAL);
				}
				break;
			case 4:
				_localctx = new FloatFactorContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 256;
				Match(FLOATLITERAL);
				}
				break;
			case 5:
				_localctx = new BoolFactorContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 257;
				Match(BOOLEANLITERAL);
				}
				break;
			case 6:
				_localctx = new CharFactorContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 258;
				Match(CHARLITERAL);
				}
				break;
			case 7:
				_localctx = new StringFactorContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 259;
				Match(STRINGLITERAL);
				}
				break;
			case 8:
				_localctx = new NullFactorContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 260;
				Match(NULL);
				}
				break;
			case 9:
				_localctx = new NewArrayFactorContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 261;
				Match(NEW);
				State = 262;
				type();
				State = 263;
				Match(LBRACK);
				State = 264;
				expr();
				State = 265;
				Match(RBRACK);
				}
				break;
			case 10:
				_localctx = new GroupFactorContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 267;
				Match(LPAREN);
				State = 268;
				expr();
				State = 269;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AlphaParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AlphaParser.RPAREN, 0); }
		public CastContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterCast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitCast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCast(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CastContext cast() {
		CastContext _localctx = new CastContext(Context, State);
		EnterRule(_localctx, 34, RULE_cast);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273;
			Match(LPAREN);
			State = 274;
			type();
			State = 275;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENT() { return GetTokens(AlphaParser.IDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT(int i) {
			return GetToken(AlphaParser.IDENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(AlphaParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(AlphaParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACK() { return GetTokens(AlphaParser.LBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK(int i) {
			return GetToken(AlphaParser.LBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACK() { return GetTokens(AlphaParser.RBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK(int i) {
			return GetToken(AlphaParser.RBRACK, i);
		}
		public DesignatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterDesignator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitDesignator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DesignatorContext designator() {
		DesignatorContext _localctx = new DesignatorContext(Context, State);
		EnterRule(_localctx, 36, RULE_designator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			Match(IDENT);
			State = 286;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LBRACK || _la==DOT) {
				{
				State = 284;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DOT:
					{
					State = 278;
					Match(DOT);
					State = 279;
					Match(IDENT);
					}
					break;
				case LBRACK:
					{
					State = 280;
					Match(LBRACK);
					State = 281;
					expr();
					State = 282;
					Match(RBRACK);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 288;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(AlphaParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(AlphaParser.NEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(AlphaParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTEQ() { return GetToken(AlphaParser.GTEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(AlphaParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTEQ() { return GetToken(AlphaParser.LTEQ, 0); }
		public RelopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterRelop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitRelop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelopContext relop() {
		RelopContext _localctx = new RelopContext(Context, State);
		EnterRule(_localctx, 38, RULE_relop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2113929216L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(AlphaParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(AlphaParser.MINUS, 0); }
		public AddopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterAddop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitAddop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddopContext addop() {
		AddopContext _localctx = new AddopContext(Context, State);
		EnterRule(_localctx, 40, RULE_addop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MulopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(AlphaParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(AlphaParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(AlphaParser.MOD, 0); }
		public MulopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mulop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterMulop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitMulop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MulopContext mulop() {
		MulopContext _localctx = new MulopContext(Context, State);
		EnterRule(_localctx, 42, RULE_mulop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 120259084288L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(AlphaParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AlphaParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AlphaParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(AlphaParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(AlphaParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(AlphaParser.INTLITERAL, 0); }
		public PrintStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterPrintStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitPrintStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStmtContext printStmt() {
		PrintStmtContext _localctx = new PrintStmtContext(Context, State);
		EnterRule(_localctx, 44, RULE_printStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			Match(PRINT);
			State = 296;
			Match(LPAREN);
			State = 297;
			expr();
			State = 300;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 298;
				Match(COMMA);
				State = 299;
				Match(INTLITERAL);
				}
			}

			State = 302;
			Match(RPAREN);
			State = 303;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,54,306,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,1,0,5,0,48,8,0,10,0,12,0,51,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,
		1,1,1,2,1,2,1,2,5,2,64,8,2,10,2,12,2,67,9,2,1,3,1,3,1,3,1,3,5,3,73,8,3,
		10,3,12,3,76,9,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,3,5,89,8,
		5,1,5,1,5,1,5,3,5,94,8,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,5,6,105,8,
		6,10,6,12,6,108,9,6,1,7,1,7,1,7,3,7,113,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,
		8,1,8,3,8,123,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,3,8,143,8,8,1,8,1,8,1,8,3,8,148,8,8,1,8,1,8,3,8,152,
		8,8,1,8,1,8,3,8,156,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
		8,3,8,170,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,182,8,8,1,9,
		1,9,1,9,1,9,5,9,188,8,9,10,9,12,9,191,9,9,1,9,1,9,1,10,1,10,1,10,5,10,
		198,8,10,10,10,12,10,201,9,10,1,11,1,11,1,11,5,11,206,8,11,10,11,12,11,
		209,9,11,1,12,1,12,1,12,5,12,214,8,12,10,12,12,12,217,9,12,1,13,1,13,1,
		13,1,13,1,14,1,14,3,14,225,8,14,1,14,1,14,1,14,1,14,1,14,5,14,232,8,14,
		10,14,12,14,235,9,14,3,14,237,8,14,1,15,1,15,1,15,1,15,5,15,243,8,15,10,
		15,12,15,246,9,15,1,16,1,16,1,16,3,16,251,8,16,1,16,1,16,1,16,1,16,1,16,
		1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
		3,16,272,8,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,5,
		18,285,8,18,10,18,12,18,288,9,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,
		22,1,22,1,22,1,22,3,22,301,8,22,1,22,1,22,1,22,1,22,0,0,23,0,2,4,6,8,10,
		12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,0,4,2,0,15,20,51,51,
		1,0,25,30,1,0,32,33,1,0,34,36,332,0,49,1,0,0,0,2,54,1,0,0,0,4,65,1,0,0,
		0,6,68,1,0,0,0,8,79,1,0,0,0,10,88,1,0,0,0,12,98,1,0,0,0,14,109,1,0,0,0,
		16,181,1,0,0,0,18,183,1,0,0,0,20,194,1,0,0,0,22,202,1,0,0,0,24,210,1,0,
		0,0,26,218,1,0,0,0,28,236,1,0,0,0,30,238,1,0,0,0,32,271,1,0,0,0,34,273,
		1,0,0,0,36,277,1,0,0,0,38,289,1,0,0,0,40,291,1,0,0,0,42,293,1,0,0,0,44,
		295,1,0,0,0,46,48,3,2,1,0,47,46,1,0,0,0,48,51,1,0,0,0,49,47,1,0,0,0,49,
		50,1,0,0,0,50,52,1,0,0,0,51,49,1,0,0,0,52,53,5,0,0,1,53,1,1,0,0,0,54,55,
		5,1,0,0,55,56,5,51,0,0,56,57,5,37,0,0,57,58,3,4,2,0,58,59,5,38,0,0,59,
		3,1,0,0,0,60,64,3,6,3,0,61,64,3,8,4,0,62,64,3,10,5,0,63,60,1,0,0,0,63,
		61,1,0,0,0,63,62,1,0,0,0,64,67,1,0,0,0,65,63,1,0,0,0,65,66,1,0,0,0,66,
		5,1,0,0,0,67,65,1,0,0,0,68,69,3,14,7,0,69,74,5,51,0,0,70,71,5,44,0,0,71,
		73,5,51,0,0,72,70,1,0,0,0,73,76,1,0,0,0,74,72,1,0,0,0,74,75,1,0,0,0,75,
		77,1,0,0,0,76,74,1,0,0,0,77,78,5,43,0,0,78,7,1,0,0,0,79,80,5,13,0,0,80,
		81,3,14,7,0,81,82,5,51,0,0,82,83,5,31,0,0,83,84,3,28,14,0,84,85,5,43,0,
		0,85,9,1,0,0,0,86,89,3,14,7,0,87,89,5,9,0,0,88,86,1,0,0,0,88,87,1,0,0,
		0,89,90,1,0,0,0,90,91,5,51,0,0,91,93,5,39,0,0,92,94,3,12,6,0,93,92,1,0,
		0,0,93,94,1,0,0,0,94,95,1,0,0,0,95,96,5,40,0,0,96,97,3,18,9,0,97,11,1,
		0,0,0,98,99,3,14,7,0,99,106,5,51,0,0,100,101,5,44,0,0,101,102,3,14,7,0,
		102,103,5,51,0,0,103,105,1,0,0,0,104,100,1,0,0,0,105,108,1,0,0,0,106,104,
		1,0,0,0,106,107,1,0,0,0,107,13,1,0,0,0,108,106,1,0,0,0,109,112,7,0,0,0,
		110,111,5,41,0,0,111,113,5,42,0,0,112,110,1,0,0,0,112,113,1,0,0,0,113,
		15,1,0,0,0,114,115,3,36,18,0,115,116,5,31,0,0,116,117,3,28,14,0,117,118,
		5,43,0,0,118,182,1,0,0,0,119,120,3,36,18,0,120,122,5,39,0,0,121,123,3,
		20,10,0,122,121,1,0,0,0,122,123,1,0,0,0,123,124,1,0,0,0,124,125,5,40,0,
		0,125,126,5,43,0,0,126,182,1,0,0,0,127,128,3,36,18,0,128,129,5,21,0,0,
		129,130,5,43,0,0,130,182,1,0,0,0,131,132,3,36,18,0,132,133,5,22,0,0,133,
		134,5,43,0,0,134,182,1,0,0,0,135,136,5,2,0,0,136,137,5,39,0,0,137,138,
		3,22,11,0,138,139,5,40,0,0,139,142,3,16,8,0,140,141,5,3,0,0,141,143,3,
		16,8,0,142,140,1,0,0,0,142,143,1,0,0,0,143,182,1,0,0,0,144,145,5,4,0,0,
		145,147,5,39,0,0,146,148,3,28,14,0,147,146,1,0,0,0,147,148,1,0,0,0,148,
		149,1,0,0,0,149,151,5,43,0,0,150,152,3,22,11,0,151,150,1,0,0,0,151,152,
		1,0,0,0,152,153,1,0,0,0,153,155,5,43,0,0,154,156,3,28,14,0,155,154,1,0,
		0,0,155,156,1,0,0,0,156,157,1,0,0,0,157,158,5,40,0,0,158,182,3,16,8,0,
		159,160,5,5,0,0,160,161,5,39,0,0,161,162,3,22,11,0,162,163,5,40,0,0,163,
		164,3,16,8,0,164,182,1,0,0,0,165,166,5,6,0,0,166,182,5,43,0,0,167,169,
		5,7,0,0,168,170,3,28,14,0,169,168,1,0,0,0,169,170,1,0,0,0,170,171,1,0,
		0,0,171,182,5,43,0,0,172,173,5,8,0,0,173,174,5,39,0,0,174,175,3,36,18,
		0,175,176,5,40,0,0,176,177,5,43,0,0,177,182,1,0,0,0,178,182,3,44,22,0,
		179,182,3,18,9,0,180,182,5,43,0,0,181,114,1,0,0,0,181,119,1,0,0,0,181,
		127,1,0,0,0,181,131,1,0,0,0,181,135,1,0,0,0,181,144,1,0,0,0,181,159,1,
		0,0,0,181,165,1,0,0,0,181,167,1,0,0,0,181,172,1,0,0,0,181,178,1,0,0,0,
		181,179,1,0,0,0,181,180,1,0,0,0,182,17,1,0,0,0,183,189,5,37,0,0,184,188,
		3,6,3,0,185,188,3,8,4,0,186,188,3,16,8,0,187,184,1,0,0,0,187,185,1,0,0,
		0,187,186,1,0,0,0,188,191,1,0,0,0,189,187,1,0,0,0,189,190,1,0,0,0,190,
		192,1,0,0,0,191,189,1,0,0,0,192,193,5,38,0,0,193,19,1,0,0,0,194,199,3,
		28,14,0,195,196,5,44,0,0,196,198,3,28,14,0,197,195,1,0,0,0,198,201,1,0,
		0,0,199,197,1,0,0,0,199,200,1,0,0,0,200,21,1,0,0,0,201,199,1,0,0,0,202,
		207,3,24,12,0,203,204,5,23,0,0,204,206,3,24,12,0,205,203,1,0,0,0,206,209,
		1,0,0,0,207,205,1,0,0,0,207,208,1,0,0,0,208,23,1,0,0,0,209,207,1,0,0,0,
		210,215,3,26,13,0,211,212,5,24,0,0,212,214,3,26,13,0,213,211,1,0,0,0,214,
		217,1,0,0,0,215,213,1,0,0,0,215,216,1,0,0,0,216,25,1,0,0,0,217,215,1,0,
		0,0,218,219,3,28,14,0,219,220,3,38,19,0,220,221,3,28,14,0,221,27,1,0,0,
		0,222,224,5,33,0,0,223,225,3,34,17,0,224,223,1,0,0,0,224,225,1,0,0,0,225,
		226,1,0,0,0,226,237,3,30,15,0,227,233,3,30,15,0,228,229,3,40,20,0,229,
		230,3,30,15,0,230,232,1,0,0,0,231,228,1,0,0,0,232,235,1,0,0,0,233,231,
		1,0,0,0,233,234,1,0,0,0,234,237,1,0,0,0,235,233,1,0,0,0,236,222,1,0,0,
		0,236,227,1,0,0,0,237,29,1,0,0,0,238,244,3,32,16,0,239,240,3,42,21,0,240,
		241,3,32,16,0,241,243,1,0,0,0,242,239,1,0,0,0,243,246,1,0,0,0,244,242,
		1,0,0,0,244,245,1,0,0,0,245,31,1,0,0,0,246,244,1,0,0,0,247,248,3,36,18,
		0,248,250,5,39,0,0,249,251,3,20,10,0,250,249,1,0,0,0,250,251,1,0,0,0,251,
		252,1,0,0,0,252,253,5,40,0,0,253,272,1,0,0,0,254,272,3,36,18,0,255,272,
		5,46,0,0,256,272,5,47,0,0,257,272,5,50,0,0,258,272,5,48,0,0,259,272,5,
		49,0,0,260,272,5,12,0,0,261,262,5,10,0,0,262,263,3,14,7,0,263,264,5,41,
		0,0,264,265,3,28,14,0,265,266,5,42,0,0,266,272,1,0,0,0,267,268,5,39,0,
		0,268,269,3,28,14,0,269,270,5,40,0,0,270,272,1,0,0,0,271,247,1,0,0,0,271,
		254,1,0,0,0,271,255,1,0,0,0,271,256,1,0,0,0,271,257,1,0,0,0,271,258,1,
		0,0,0,271,259,1,0,0,0,271,260,1,0,0,0,271,261,1,0,0,0,271,267,1,0,0,0,
		272,33,1,0,0,0,273,274,5,39,0,0,274,275,3,14,7,0,275,276,5,40,0,0,276,
		35,1,0,0,0,277,286,5,51,0,0,278,279,5,45,0,0,279,285,5,51,0,0,280,281,
		5,41,0,0,281,282,3,28,14,0,282,283,5,42,0,0,283,285,1,0,0,0,284,278,1,
		0,0,0,284,280,1,0,0,0,285,288,1,0,0,0,286,284,1,0,0,0,286,287,1,0,0,0,
		287,37,1,0,0,0,288,286,1,0,0,0,289,290,7,1,0,0,290,39,1,0,0,0,291,292,
		7,2,0,0,292,41,1,0,0,0,293,294,7,3,0,0,294,43,1,0,0,0,295,296,5,11,0,0,
		296,297,5,39,0,0,297,300,3,28,14,0,298,299,5,44,0,0,299,301,5,46,0,0,300,
		298,1,0,0,0,300,301,1,0,0,0,301,302,1,0,0,0,302,303,5,40,0,0,303,304,5,
		43,0,0,304,45,1,0,0,0,29,49,63,65,74,88,93,106,112,122,142,147,151,155,
		169,181,187,189,199,207,215,224,233,236,244,250,271,284,286,300
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
