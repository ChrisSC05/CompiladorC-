//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from AlphaParser.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class AlphaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		CLASS=1, IF=2, ELSE=3, FOR=4, WHILE=5, BREAK=6, RETURN=7, READ=8, VOID=9, 
		NEW=10, PRINT=11, NULL=12, CONST=13, VAR=14, INT=15, DOUBLE_T=16, BOOL=17, 
		CHAR_T=18, STRING_T=19, INC=20, DEC=21, OR=22, AND=23, EQ=24, NEQ=25, 
		GTEQ=26, LTEQ=27, GT=28, LT=29, ASSIGN=30, PLUS=31, MINUS=32, STAR=33, 
		DIV=34, MOD=35, LBRACE=36, RBRACE=37, LPAREN=38, RPAREN=39, LBRACK=40, 
		RBRACK=41, SEMI=42, COMMA=43, DOT=44, INTLITERAL=45, DOUBLELITERAL=46, 
		CHARLITERAL=47, STRINGLITERAL=48, BOOLEANLITERAL=49, IDENT=50, LINE_COMMENT=51, 
		BLOCK_COMMENT=52, WS=53;
	public const int
		RULE_program = 0, RULE_classDecl = 1, RULE_classBody = 2, RULE_varDecl = 3, 
		RULE_constDecl = 4, RULE_methodDecl = 5, RULE_formPars = 6, RULE_type = 7, 
		RULE_statement = 8, RULE_block = 9, RULE_actPars = 10, RULE_condition = 11, 
		RULE_condTerm = 12, RULE_condFact = 13, RULE_expr = 14, RULE_term = 15, 
		RULE_factor = 16, RULE_cast = 17, RULE_designator = 18, RULE_relop = 19, 
		RULE_addop = 20, RULE_mulop = 21, RULE_printStmt = 22;
	public static readonly string[] ruleNames = {
		"program", "classDecl", "classBody", "varDecl", "constDecl", "methodDecl", 
		"formPars", "type", "statement", "block", "actPars", "condition", "condTerm", 
		"condFact", "expr", "term", "factor", "cast", "designator", "relop", "addop", 
		"mulop", "printStmt"
	};

	private static readonly string[] _LiteralNames = {
		null, "'class'", "'if'", "'else'", "'for'", "'while'", "'break'", "'return'", 
		"'read'", "'void'", "'new'", "'print'", "'null'", "'const'", "'var'", 
		"'int'", "'double'", "'bool'", "'char'", "'string'", "'++'", "'--'", "'||'", 
		"'&&'", "'=='", "'!='", "'>='", "'<='", "'>'", "'<'", "'='", "'+'", "'-'", 
		"'*'", "'/'", "'%'", "'{'", "'}'", "'('", "')'", "'['", "']'", "';'", 
		"','", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CLASS", "IF", "ELSE", "FOR", "WHILE", "BREAK", "RETURN", "READ", 
		"VOID", "NEW", "PRINT", "NULL", "CONST", "VAR", "INT", "DOUBLE_T", "BOOL", 
		"CHAR_T", "STRING_T", "INC", "DEC", "OR", "AND", "EQ", "NEQ", "GTEQ", 
		"LTEQ", "GT", "LT", "ASSIGN", "PLUS", "MINUS", "STAR", "DIV", "MOD", "LBRACE", 
		"RBRACE", "LPAREN", "RPAREN", "LBRACK", "RBRACK", "SEMI", "COMMA", "DOT", 
		"INTLITERAL", "DOUBLELITERAL", "CHARLITERAL", "STRINGLITERAL", "BOOLEANLITERAL", 
		"IDENT", "LINE_COMMENT", "BLOCK_COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AlphaParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static AlphaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AlphaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AlphaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(AlphaParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclContext[] classDecl() {
			return GetRuleContexts<ClassDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclContext classDecl(int i) {
			return GetRuleContext<ClassDeclContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CLASS) {
				{
				{
				State = 46;
				classDecl();
				}
				}
				State = 51;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 52;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(AlphaParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(AlphaParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(AlphaParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(AlphaParser.RBRACE, 0); }
		public ClassDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterClassDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitClassDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclContext classDecl() {
		ClassDeclContext _localctx = new ClassDeclContext(Context, State);
		EnterRule(_localctx, 2, RULE_classDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			Match(CLASS);
			State = 55;
			Match(IDENT);
			State = 56;
			Match(LBRACE);
			State = 57;
			classBody();
			State = 58;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstDeclContext[] constDecl() {
			return GetRuleContexts<ConstDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstDeclContext constDecl(int i) {
			return GetRuleContext<ConstDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclContext[] methodDecl() {
			return GetRuleContexts<MethodDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclContext methodDecl(int i) {
			return GetRuleContext<MethodDeclContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 4, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VOID) | (1L << CONST) | (1L << INT) | (1L << DOUBLE_T) | (1L << BOOL) | (1L << CHAR_T) | (1L << STRING_T) | (1L << IDENT))) != 0)) {
				{
				State = 63;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
				case 1:
					{
					State = 60;
					varDecl();
					}
					break;
				case 2:
					{
					State = 61;
					constDecl();
					}
					break;
				case 3:
					{
					State = 62;
					methodDecl();
					}
					break;
				}
				}
				State = 67;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENT() { return GetTokens(AlphaParser.IDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT(int i) {
			return GetToken(AlphaParser.IDENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(AlphaParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AlphaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AlphaParser.COMMA, i);
		}
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 6, RULE_varDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			type();
			State = 69;
			Match(IDENT);
			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 70;
				Match(COMMA);
				State = 71;
				Match(IDENT);
				}
				}
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 77;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(AlphaParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(AlphaParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(AlphaParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(AlphaParser.SEMI, 0); }
		public ConstDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterConstDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitConstDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstDeclContext constDecl() {
		ConstDeclContext _localctx = new ConstDeclContext(Context, State);
		EnterRule(_localctx, 8, RULE_constDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			Match(CONST);
			State = 80;
			type();
			State = 81;
			Match(IDENT);
			State = 82;
			Match(ASSIGN);
			State = 83;
			expr();
			State = 84;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(AlphaParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AlphaParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AlphaParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(AlphaParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormParsContext formPars() {
			return GetRuleContext<FormParsContext>(0);
		}
		public MethodDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterMethodDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitMethodDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclContext methodDecl() {
		MethodDeclContext _localctx = new MethodDeclContext(Context, State);
		EnterRule(_localctx, 10, RULE_methodDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
			case DOUBLE_T:
			case BOOL:
			case CHAR_T:
			case STRING_T:
			case IDENT:
				{
				State = 86;
				type();
				}
				break;
			case VOID:
				{
				State = 87;
				Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 90;
			Match(IDENT);
			State = 91;
			Match(LPAREN);
			State = 93;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << DOUBLE_T) | (1L << BOOL) | (1L << CHAR_T) | (1L << STRING_T) | (1L << IDENT))) != 0)) {
				{
				State = 92;
				formPars();
				}
			}

			State = 95;
			Match(RPAREN);
			State = 96;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormParsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENT() { return GetTokens(AlphaParser.IDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT(int i) {
			return GetToken(AlphaParser.IDENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AlphaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AlphaParser.COMMA, i);
		}
		public FormParsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formPars; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterFormPars(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitFormPars(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormPars(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormParsContext formPars() {
		FormParsContext _localctx = new FormParsContext(Context, State);
		EnterRule(_localctx, 12, RULE_formPars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			type();
			State = 99;
			Match(IDENT);
			State = 106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 100;
				Match(COMMA);
				State = 101;
				type();
				State = 102;
				Match(IDENT);
				}
				}
				State = 108;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(AlphaParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_T() { return GetToken(AlphaParser.CHAR_T, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(AlphaParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_T() { return GetToken(AlphaParser.DOUBLE_T, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_T() { return GetToken(AlphaParser.STRING_T, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(AlphaParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(AlphaParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(AlphaParser.RBRACK, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 14, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << DOUBLE_T) | (1L << BOOL) | (1L << CHAR_T) | (1L << STRING_T) | (1L << IDENT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 112;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 110;
				Match(LBRACK);
				State = 111;
				Match(RBRACK);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IncStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC() { return GetToken(AlphaParser.INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(AlphaParser.SEMI, 0); }
		public IncStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterIncStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitIncStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmptyStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(AlphaParser.SEMI, 0); }
		public EmptyStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterEmptyStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitEmptyStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DecStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(AlphaParser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(AlphaParser.SEMI, 0); }
		public DecStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterDecStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitDecStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public BlockStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(AlphaParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AlphaParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(AlphaParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(AlphaParser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AlphaParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ForStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BreakStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(AlphaParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(AlphaParser.SEMI, 0); }
		public BreakStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReadStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(AlphaParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AlphaParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AlphaParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(AlphaParser.SEMI, 0); }
		public ReadStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterReadStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitReadStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AlphaParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AlphaParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(AlphaParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActParsContext actPars() {
			return GetRuleContext<ActParsContext>(0);
		}
		public CallStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(AlphaParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AlphaParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AlphaParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(AlphaParser.ELSE, 0); }
		public IfStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(AlphaParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(AlphaParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(AlphaParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AlphaParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AlphaParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrintStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrintStmtContext printStmt() {
			return GetRuleContext<PrintStmtContext>(0);
		}
		public PrintStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterPrintStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitPrintStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(AlphaParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(AlphaParser.SEMI, 0); }
		public AssignStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterAssignStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitAssignStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_statement);
		int _la;
		try {
			State = 181;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				_localctx = new AssignStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 114;
				designator();
				State = 115;
				Match(ASSIGN);
				State = 116;
				expr();
				State = 117;
				Match(SEMI);
				}
				break;
			case 2:
				_localctx = new CallStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 119;
				designator();
				State = 120;
				Match(LPAREN);
				State = 122;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << NULL) | (1L << MINUS) | (1L << LPAREN) | (1L << INTLITERAL) | (1L << DOUBLELITERAL) | (1L << CHARLITERAL) | (1L << STRINGLITERAL) | (1L << BOOLEANLITERAL) | (1L << IDENT))) != 0)) {
					{
					State = 121;
					actPars();
					}
				}

				State = 124;
				Match(RPAREN);
				State = 125;
				Match(SEMI);
				}
				break;
			case 3:
				_localctx = new IncStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 127;
				designator();
				State = 128;
				Match(INC);
				State = 129;
				Match(SEMI);
				}
				break;
			case 4:
				_localctx = new DecStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 131;
				designator();
				State = 132;
				Match(DEC);
				State = 133;
				Match(SEMI);
				}
				break;
			case 5:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 135;
				Match(IF);
				State = 136;
				Match(LPAREN);
				State = 137;
				condition();
				State = 138;
				Match(RPAREN);
				State = 139;
				block();
				State = 142;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 140;
					Match(ELSE);
					State = 141;
					block();
					}
				}

				}
				break;
			case 6:
				_localctx = new ForStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 144;
				Match(FOR);
				State = 145;
				Match(LPAREN);
				State = 147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << NULL) | (1L << MINUS) | (1L << LPAREN) | (1L << INTLITERAL) | (1L << DOUBLELITERAL) | (1L << CHARLITERAL) | (1L << STRINGLITERAL) | (1L << BOOLEANLITERAL) | (1L << IDENT))) != 0)) {
					{
					State = 146;
					expr();
					}
				}

				State = 149;
				Match(SEMI);
				State = 151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << NULL) | (1L << MINUS) | (1L << LPAREN) | (1L << INTLITERAL) | (1L << DOUBLELITERAL) | (1L << CHARLITERAL) | (1L << STRINGLITERAL) | (1L << BOOLEANLITERAL) | (1L << IDENT))) != 0)) {
					{
					State = 150;
					condition();
					}
				}

				State = 153;
				Match(SEMI);
				State = 155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << NULL) | (1L << MINUS) | (1L << LPAREN) | (1L << INTLITERAL) | (1L << DOUBLELITERAL) | (1L << CHARLITERAL) | (1L << STRINGLITERAL) | (1L << BOOLEANLITERAL) | (1L << IDENT))) != 0)) {
					{
					State = 154;
					expr();
					}
				}

				State = 157;
				Match(RPAREN);
				State = 158;
				statement();
				}
				break;
			case 7:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 159;
				Match(WHILE);
				State = 160;
				Match(LPAREN);
				State = 161;
				condition();
				State = 162;
				Match(RPAREN);
				State = 163;
				statement();
				}
				break;
			case 8:
				_localctx = new BreakStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 165;
				Match(BREAK);
				State = 166;
				Match(SEMI);
				}
				break;
			case 9:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 167;
				Match(RETURN);
				State = 169;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << NULL) | (1L << MINUS) | (1L << LPAREN) | (1L << INTLITERAL) | (1L << DOUBLELITERAL) | (1L << CHARLITERAL) | (1L << STRINGLITERAL) | (1L << BOOLEANLITERAL) | (1L << IDENT))) != 0)) {
					{
					State = 168;
					expr();
					}
				}

				State = 171;
				Match(SEMI);
				}
				break;
			case 10:
				_localctx = new ReadStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 172;
				Match(READ);
				State = 173;
				Match(LPAREN);
				State = 174;
				designator();
				State = 175;
				Match(RPAREN);
				State = 176;
				Match(SEMI);
				}
				break;
			case 11:
				_localctx = new PrintStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 178;
				printStmt();
				}
				break;
			case 12:
				_localctx = new BlockStatementContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 179;
				block();
				}
				break;
			case 13:
				_localctx = new EmptyStatementContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 180;
				Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(AlphaParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(AlphaParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstDeclContext[] constDecl() {
			return GetRuleContexts<ConstDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstDeclContext constDecl(int i) {
			return GetRuleContext<ConstDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 18, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			Match(LBRACE);
			State = 189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << FOR) | (1L << WHILE) | (1L << BREAK) | (1L << RETURN) | (1L << READ) | (1L << PRINT) | (1L << CONST) | (1L << INT) | (1L << DOUBLE_T) | (1L << BOOL) | (1L << CHAR_T) | (1L << STRING_T) | (1L << LBRACE) | (1L << SEMI) | (1L << IDENT))) != 0)) {
				{
				State = 187;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
				case 1:
					{
					State = 184;
					varDecl();
					}
					break;
				case 2:
					{
					State = 185;
					constDecl();
					}
					break;
				case 3:
					{
					State = 186;
					statement();
					}
					break;
				}
				}
				State = 191;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 192;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActParsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AlphaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AlphaParser.COMMA, i);
		}
		public ActParsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actPars; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterActPars(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitActPars(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActPars(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActParsContext actPars() {
		ActParsContext _localctx = new ActParsContext(Context, State);
		EnterRule(_localctx, 20, RULE_actPars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			expr();
			State = 199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 195;
				Match(COMMA);
				State = 196;
				expr();
				}
				}
				State = 201;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CondTermContext[] condTerm() {
			return GetRuleContexts<CondTermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondTermContext condTerm(int i) {
			return GetRuleContext<CondTermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(AlphaParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(AlphaParser.OR, i);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 22, RULE_condition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			condTerm();
			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 203;
				Match(OR);
				State = 204;
				condTerm();
				}
				}
				State = 209;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CondFactContext[] condFact() {
			return GetRuleContexts<CondFactContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondFactContext condFact(int i) {
			return GetRuleContext<CondFactContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(AlphaParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(AlphaParser.AND, i);
		}
		public CondTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterCondTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitCondTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondTermContext condTerm() {
		CondTermContext _localctx = new CondTermContext(Context, State);
		EnterRule(_localctx, 24, RULE_condTerm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			condFact();
			State = 215;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 211;
				Match(AND);
				State = 212;
				condFact();
				}
				}
				State = 217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondFactContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelopContext relop() {
			return GetRuleContext<RelopContext>(0);
		}
		public CondFactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condFact; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterCondFact(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitCondFact(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondFact(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondFactContext condFact() {
		CondFactContext _localctx = new CondFactContext(Context, State);
		EnterRule(_localctx, 26, RULE_condFact);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			expr();
			State = 219;
			relop();
			State = 220;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnaryExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(AlphaParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CastContext cast() {
			return GetRuleContext<CastContext>(0);
		}
		public UnaryExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterUnaryExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitUnaryExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddopContext[] addop() {
			return GetRuleContexts<AddopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddopContext addop(int i) {
			return GetRuleContext<AddopContext>(i);
		}
		public BinaryExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterBinaryExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitBinaryExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 28, RULE_expr);
		int _la;
		try {
			State = 236;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MINUS:
				_localctx = new UnaryExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 222;
				Match(MINUS);
				State = 224;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
				case 1:
					{
					State = 223;
					cast();
					}
					break;
				}
				State = 226;
				term();
				}
				break;
			case NEW:
			case NULL:
			case LPAREN:
			case INTLITERAL:
			case DOUBLELITERAL:
			case CHARLITERAL:
			case STRINGLITERAL:
			case BOOLEANLITERAL:
			case IDENT:
				_localctx = new BinaryExprContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 227;
				term();
				State = 233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==PLUS || _la==MINUS) {
					{
					{
					State = 228;
					addop();
					State = 229;
					term();
					}
					}
					State = 235;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	 
		public TermContext() { }
		public virtual void CopyFrom(TermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TermExprContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MulopContext[] mulop() {
			return GetRuleContexts<MulopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MulopContext mulop(int i) {
			return GetRuleContext<MulopContext>(i);
		}
		public TermExprContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterTermExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitTermExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 30, RULE_term);
		int _la;
		try {
			_localctx = new TermExprContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			factor();
			State = 244;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STAR) | (1L << DIV) | (1L << MOD))) != 0)) {
				{
				{
				State = 239;
				mulop();
				State = 240;
				factor();
				}
				}
				State = 246;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
	 
		public FactorContext() { }
		public virtual void CopyFrom(FactorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CallFactorContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AlphaParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AlphaParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActParsContext actPars() {
			return GetRuleContext<ActParsContext>(0);
		}
		public CallFactorContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterCallFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitCallFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallFactor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntFactorContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(AlphaParser.INTLITERAL, 0); }
		public IntFactorContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterIntFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitIntFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntFactor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CharFactorContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARLITERAL() { return GetToken(AlphaParser.CHARLITERAL, 0); }
		public CharFactorContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterCharFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitCharFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharFactor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringFactorContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(AlphaParser.STRINGLITERAL, 0); }
		public StringFactorContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterStringFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitStringFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringFactor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DesignatorFactorContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		public DesignatorFactorContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterDesignatorFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitDesignatorFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignatorFactor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewArrayFactorContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(AlphaParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(AlphaParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(AlphaParser.RBRACK, 0); }
		public NewArrayFactorContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterNewArrayFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitNewArrayFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewArrayFactor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullFactorContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(AlphaParser.NULL, 0); }
		public NullFactorContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterNullFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitNullFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullFactor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolFactorContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEANLITERAL() { return GetToken(AlphaParser.BOOLEANLITERAL, 0); }
		public BoolFactorContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterBoolFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitBoolFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolFactor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoubleFactorContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLELITERAL() { return GetToken(AlphaParser.DOUBLELITERAL, 0); }
		public DoubleFactorContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterDoubleFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitDoubleFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoubleFactor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GroupFactorContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AlphaParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AlphaParser.RPAREN, 0); }
		public GroupFactorContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterGroupFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitGroupFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 32, RULE_factor);
		int _la;
		try {
			State = 271;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				_localctx = new CallFactorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 247;
				designator();
				State = 248;
				Match(LPAREN);
				State = 250;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << NULL) | (1L << MINUS) | (1L << LPAREN) | (1L << INTLITERAL) | (1L << DOUBLELITERAL) | (1L << CHARLITERAL) | (1L << STRINGLITERAL) | (1L << BOOLEANLITERAL) | (1L << IDENT))) != 0)) {
					{
					State = 249;
					actPars();
					}
				}

				State = 252;
				Match(RPAREN);
				}
				break;
			case 2:
				_localctx = new DesignatorFactorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 254;
				designator();
				}
				break;
			case 3:
				_localctx = new IntFactorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 255;
				Match(INTLITERAL);
				}
				break;
			case 4:
				_localctx = new DoubleFactorContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 256;
				Match(DOUBLELITERAL);
				}
				break;
			case 5:
				_localctx = new BoolFactorContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 257;
				Match(BOOLEANLITERAL);
				}
				break;
			case 6:
				_localctx = new CharFactorContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 258;
				Match(CHARLITERAL);
				}
				break;
			case 7:
				_localctx = new StringFactorContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 259;
				Match(STRINGLITERAL);
				}
				break;
			case 8:
				_localctx = new NullFactorContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 260;
				Match(NULL);
				}
				break;
			case 9:
				_localctx = new NewArrayFactorContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 261;
				Match(NEW);
				State = 262;
				type();
				State = 263;
				Match(LBRACK);
				State = 264;
				expr();
				State = 265;
				Match(RBRACK);
				}
				break;
			case 10:
				_localctx = new GroupFactorContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 267;
				Match(LPAREN);
				State = 268;
				expr();
				State = 269;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AlphaParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AlphaParser.RPAREN, 0); }
		public CastContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterCast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitCast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCast(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CastContext cast() {
		CastContext _localctx = new CastContext(Context, State);
		EnterRule(_localctx, 34, RULE_cast);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273;
			Match(LPAREN);
			State = 274;
			type();
			State = 275;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENT() { return GetTokens(AlphaParser.IDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT(int i) {
			return GetToken(AlphaParser.IDENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(AlphaParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(AlphaParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACK() { return GetTokens(AlphaParser.LBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK(int i) {
			return GetToken(AlphaParser.LBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACK() { return GetTokens(AlphaParser.RBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK(int i) {
			return GetToken(AlphaParser.RBRACK, i);
		}
		public DesignatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterDesignator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitDesignator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DesignatorContext designator() {
		DesignatorContext _localctx = new DesignatorContext(Context, State);
		EnterRule(_localctx, 36, RULE_designator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			Match(IDENT);
			State = 286;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LBRACK || _la==DOT) {
				{
				State = 284;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DOT:
					{
					State = 278;
					Match(DOT);
					State = 279;
					Match(IDENT);
					}
					break;
				case LBRACK:
					{
					State = 280;
					Match(LBRACK);
					State = 281;
					expr();
					State = 282;
					Match(RBRACK);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 288;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(AlphaParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(AlphaParser.NEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(AlphaParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTEQ() { return GetToken(AlphaParser.GTEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(AlphaParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTEQ() { return GetToken(AlphaParser.LTEQ, 0); }
		public RelopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterRelop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitRelop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelopContext relop() {
		RelopContext _localctx = new RelopContext(Context, State);
		EnterRule(_localctx, 38, RULE_relop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ) | (1L << NEQ) | (1L << GTEQ) | (1L << LTEQ) | (1L << GT) | (1L << LT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(AlphaParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(AlphaParser.MINUS, 0); }
		public AddopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterAddop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitAddop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddopContext addop() {
		AddopContext _localctx = new AddopContext(Context, State);
		EnterRule(_localctx, 40, RULE_addop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MulopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(AlphaParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(AlphaParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(AlphaParser.MOD, 0); }
		public MulopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mulop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterMulop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitMulop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MulopContext mulop() {
		MulopContext _localctx = new MulopContext(Context, State);
		EnterRule(_localctx, 42, RULE_mulop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STAR) | (1L << DIV) | (1L << MOD))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(AlphaParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AlphaParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AlphaParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(AlphaParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(AlphaParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(AlphaParser.INTLITERAL, 0); }
		public PrintStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.EnterPrintStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAlphaParserListener typedListener = listener as IAlphaParserListener;
			if (typedListener != null) typedListener.ExitPrintStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAlphaParserVisitor<TResult> typedVisitor = visitor as IAlphaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStmtContext printStmt() {
		PrintStmtContext _localctx = new PrintStmtContext(Context, State);
		EnterRule(_localctx, 44, RULE_printStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			Match(PRINT);
			State = 296;
			Match(LPAREN);
			State = 297;
			expr();
			State = 300;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 298;
				Match(COMMA);
				State = 299;
				Match(INTLITERAL);
				}
			}

			State = 302;
			Match(RPAREN);
			State = 303;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x37', '\x134', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x3', '\x2', '\a', '\x2', '\x32', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '\x35', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '\x42', '\n', '\x4', 
		'\f', '\x4', '\xE', '\x4', '\x45', '\v', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\a', '\x5', 'K', '\n', '\x5', '\f', '\x5', 
		'\xE', '\x5', 'N', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x5', '\a', '[', '\n', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '`', '\n', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', 'k', '\n', '\b', '\f', 
		'\b', '\xE', '\b', 'n', '\v', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x5', '\t', 's', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', 
		'}', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\x91', '\n', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\x96', '\n', '\n', '\x3', 
		'\n', '\x3', '\n', '\x5', '\n', '\x9A', '\n', '\n', '\x3', '\n', '\x3', 
		'\n', '\x5', '\n', '\x9E', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\xAC', 
		'\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x5', '\n', '\xB8', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\a', '\v', '\xBE', '\n', '\v', '\f', '\v', '\xE', '\v', 
		'\xC1', '\v', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\a', '\f', '\xC8', '\n', '\f', '\f', '\f', '\xE', '\f', 
		'\xCB', '\v', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', 
		'\xD0', '\n', '\r', '\f', '\r', '\xE', '\r', '\xD3', '\v', '\r', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\xD8', '\n', '\xE', '\f', 
		'\xE', '\xE', '\xE', '\xDB', '\v', '\xE', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', 
		'\xE3', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\a', '\x10', '\xEA', '\n', '\x10', '\f', '\x10', 
		'\xE', '\x10', '\xED', '\v', '\x10', '\x5', '\x10', '\xEF', '\n', '\x10', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', 
		'\xF5', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\xF8', '\v', '\x11', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\xFD', '\n', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', 
		'\x12', '\x112', '\n', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\a', '\x14', '\x11F', '\n', 
		'\x14', '\f', '\x14', '\xE', '\x14', '\x122', '\v', '\x14', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x5', '\x18', '\x12F', '\n', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x2', '\x2', '\x19', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', 
		'\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x2', '\x6', '\x4', 
		'\x2', '\x11', '\x15', '\x34', '\x34', '\x3', '\x2', '\x1A', '\x1F', '\x3', 
		'\x2', '!', '\"', '\x3', '\x2', '#', '%', '\x2', '\x14E', '\x2', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '\x38', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\x43', '\x3', '\x2', '\x2', '\x2', '\b', '\x46', '\x3', '\x2', 
		'\x2', '\x2', '\n', 'Q', '\x3', '\x2', '\x2', '\x2', '\f', 'Z', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\x64', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'o', '\x3', '\x2', '\x2', '\x2', '\x12', '\xB7', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\xB9', '\x3', '\x2', '\x2', '\x2', '\x16', '\xC4', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '\xCC', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\xD4', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xDC', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\xEE', '\x3', '\x2', '\x2', '\x2', ' ', '\xF0', '\x3', 
		'\x2', '\x2', '\x2', '\"', '\x111', '\x3', '\x2', '\x2', '\x2', '$', '\x113', 
		'\x3', '\x2', '\x2', '\x2', '&', '\x117', '\x3', '\x2', '\x2', '\x2', 
		'(', '\x123', '\x3', '\x2', '\x2', '\x2', '*', '\x125', '\x3', '\x2', 
		'\x2', '\x2', ',', '\x127', '\x3', '\x2', '\x2', '\x2', '.', '\x129', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x32', '\x5', '\x4', '\x3', '\x2', 
		'\x31', '\x30', '\x3', '\x2', '\x2', '\x2', '\x32', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '\x33', '\x31', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\x36', '\x3', '\x2', '\x2', '\x2', 
		'\x35', '\x33', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\a', '\x2', 
		'\x2', '\x3', '\x37', '\x3', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', 
		'\a', '\x3', '\x2', '\x2', '\x39', ':', '\a', '\x34', '\x2', '\x2', ':', 
		';', '\a', '&', '\x2', '\x2', ';', '<', '\x5', '\x6', '\x4', '\x2', '<', 
		'=', '\a', '\'', '\x2', '\x2', '=', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'>', '\x42', '\x5', '\b', '\x5', '\x2', '?', '\x42', '\x5', '\n', '\x6', 
		'\x2', '@', '\x42', '\x5', '\f', '\a', '\x2', '\x41', '>', '\x3', '\x2', 
		'\x2', '\x2', '\x41', '?', '\x3', '\x2', '\x2', '\x2', '\x41', '@', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '\x45', '\x3', '\x2', '\x2', '\x2', '\x43', 
		'\x41', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\x3', '\x2', '\x2', 
		'\x2', '\x44', '\a', '\x3', '\x2', '\x2', '\x2', '\x45', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\x46', 'G', '\x5', '\x10', '\t', '\x2', 'G', 'L', 
		'\a', '\x34', '\x2', '\x2', 'H', 'I', '\a', '-', '\x2', '\x2', 'I', 'K', 
		'\a', '\x34', '\x2', '\x2', 'J', 'H', '\x3', '\x2', '\x2', '\x2', 'K', 
		'N', '\x3', '\x2', '\x2', '\x2', 'L', 'J', '\x3', '\x2', '\x2', '\x2', 
		'L', 'M', '\x3', '\x2', '\x2', '\x2', 'M', 'O', '\x3', '\x2', '\x2', '\x2', 
		'N', 'L', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\a', ',', '\x2', '\x2', 
		'P', '\t', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\a', '\xF', '\x2', '\x2', 
		'R', 'S', '\x5', '\x10', '\t', '\x2', 'S', 'T', '\a', '\x34', '\x2', '\x2', 
		'T', 'U', '\a', ' ', '\x2', '\x2', 'U', 'V', '\x5', '\x1E', '\x10', '\x2', 
		'V', 'W', '\a', ',', '\x2', '\x2', 'W', '\v', '\x3', '\x2', '\x2', '\x2', 
		'X', '[', '\x5', '\x10', '\t', '\x2', 'Y', '[', '\a', '\v', '\x2', '\x2', 
		'Z', 'X', '\x3', '\x2', '\x2', '\x2', 'Z', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'[', '\\', '\x3', '\x2', '\x2', '\x2', '\\', ']', '\a', '\x34', '\x2', 
		'\x2', ']', '_', '\a', '(', '\x2', '\x2', '^', '`', '\x5', '\xE', '\b', 
		'\x2', '_', '^', '\x3', '\x2', '\x2', '\x2', '_', '`', '\x3', '\x2', '\x2', 
		'\x2', '`', '\x61', '\x3', '\x2', '\x2', '\x2', '\x61', '\x62', '\a', 
		')', '\x2', '\x2', '\x62', '\x63', '\x5', '\x14', '\v', '\x2', '\x63', 
		'\r', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\x5', '\x10', '\t', 
		'\x2', '\x65', 'l', '\a', '\x34', '\x2', '\x2', '\x66', 'g', '\a', '-', 
		'\x2', '\x2', 'g', 'h', '\x5', '\x10', '\t', '\x2', 'h', 'i', '\a', '\x34', 
		'\x2', '\x2', 'i', 'k', '\x3', '\x2', '\x2', '\x2', 'j', '\x66', '\x3', 
		'\x2', '\x2', '\x2', 'k', 'n', '\x3', '\x2', '\x2', '\x2', 'l', 'j', '\x3', 
		'\x2', '\x2', '\x2', 'l', 'm', '\x3', '\x2', '\x2', '\x2', 'm', '\xF', 
		'\x3', '\x2', '\x2', '\x2', 'n', 'l', '\x3', '\x2', '\x2', '\x2', 'o', 
		'r', '\t', '\x2', '\x2', '\x2', 'p', 'q', '\a', '*', '\x2', '\x2', 'q', 
		's', '\a', '+', '\x2', '\x2', 'r', 'p', '\x3', '\x2', '\x2', '\x2', 'r', 
		's', '\x3', '\x2', '\x2', '\x2', 's', '\x11', '\x3', '\x2', '\x2', '\x2', 
		't', 'u', '\x5', '&', '\x14', '\x2', 'u', 'v', '\a', ' ', '\x2', '\x2', 
		'v', 'w', '\x5', '\x1E', '\x10', '\x2', 'w', 'x', '\a', ',', '\x2', '\x2', 
		'x', '\xB8', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\x5', '&', '\x14', 
		'\x2', 'z', '|', '\a', '(', '\x2', '\x2', '{', '}', '\x5', '\x16', '\f', 
		'\x2', '|', '{', '\x3', '\x2', '\x2', '\x2', '|', '}', '\x3', '\x2', '\x2', 
		'\x2', '}', '~', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', '\a', ')', '\x2', 
		'\x2', '\x7F', '\x80', '\a', ',', '\x2', '\x2', '\x80', '\xB8', '\x3', 
		'\x2', '\x2', '\x2', '\x81', '\x82', '\x5', '&', '\x14', '\x2', '\x82', 
		'\x83', '\a', '\x16', '\x2', '\x2', '\x83', '\x84', '\a', ',', '\x2', 
		'\x2', '\x84', '\xB8', '\x3', '\x2', '\x2', '\x2', '\x85', '\x86', '\x5', 
		'&', '\x14', '\x2', '\x86', '\x87', '\a', '\x17', '\x2', '\x2', '\x87', 
		'\x88', '\a', ',', '\x2', '\x2', '\x88', '\xB8', '\x3', '\x2', '\x2', 
		'\x2', '\x89', '\x8A', '\a', '\x4', '\x2', '\x2', '\x8A', '\x8B', '\a', 
		'(', '\x2', '\x2', '\x8B', '\x8C', '\x5', '\x18', '\r', '\x2', '\x8C', 
		'\x8D', '\a', ')', '\x2', '\x2', '\x8D', '\x90', '\x5', '\x14', '\v', 
		'\x2', '\x8E', '\x8F', '\a', '\x5', '\x2', '\x2', '\x8F', '\x91', '\x5', 
		'\x14', '\v', '\x2', '\x90', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x90', 
		'\x91', '\x3', '\x2', '\x2', '\x2', '\x91', '\xB8', '\x3', '\x2', '\x2', 
		'\x2', '\x92', '\x93', '\a', '\x6', '\x2', '\x2', '\x93', '\x95', '\a', 
		'(', '\x2', '\x2', '\x94', '\x96', '\x5', '\x1E', '\x10', '\x2', '\x95', 
		'\x94', '\x3', '\x2', '\x2', '\x2', '\x95', '\x96', '\x3', '\x2', '\x2', 
		'\x2', '\x96', '\x97', '\x3', '\x2', '\x2', '\x2', '\x97', '\x99', '\a', 
		',', '\x2', '\x2', '\x98', '\x9A', '\x5', '\x18', '\r', '\x2', '\x99', 
		'\x98', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', '\x3', '\x2', '\x2', 
		'\x2', '\x9A', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9D', '\a', 
		',', '\x2', '\x2', '\x9C', '\x9E', '\x5', '\x1E', '\x10', '\x2', '\x9D', 
		'\x9C', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9E', '\x3', '\x2', '\x2', 
		'\x2', '\x9E', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', '\a', 
		')', '\x2', '\x2', '\xA0', '\xB8', '\x5', '\x12', '\n', '\x2', '\xA1', 
		'\xA2', '\a', '\a', '\x2', '\x2', '\xA2', '\xA3', '\a', '(', '\x2', '\x2', 
		'\xA3', '\xA4', '\x5', '\x18', '\r', '\x2', '\xA4', '\xA5', '\a', ')', 
		'\x2', '\x2', '\xA5', '\xA6', '\x5', '\x12', '\n', '\x2', '\xA6', '\xB8', 
		'\x3', '\x2', '\x2', '\x2', '\xA7', '\xA8', '\a', '\b', '\x2', '\x2', 
		'\xA8', '\xB8', '\a', ',', '\x2', '\x2', '\xA9', '\xAB', '\a', '\t', '\x2', 
		'\x2', '\xAA', '\xAC', '\x5', '\x1E', '\x10', '\x2', '\xAB', '\xAA', '\x3', 
		'\x2', '\x2', '\x2', '\xAB', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAC', 
		'\xAD', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xB8', '\a', ',', '\x2', 
		'\x2', '\xAE', '\xAF', '\a', '\n', '\x2', '\x2', '\xAF', '\xB0', '\a', 
		'(', '\x2', '\x2', '\xB0', '\xB1', '\x5', '&', '\x14', '\x2', '\xB1', 
		'\xB2', '\a', ')', '\x2', '\x2', '\xB2', '\xB3', '\a', ',', '\x2', '\x2', 
		'\xB3', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB8', '\x5', '.', 
		'\x18', '\x2', '\xB5', '\xB8', '\x5', '\x14', '\v', '\x2', '\xB6', '\xB8', 
		'\a', ',', '\x2', '\x2', '\xB7', 't', '\x3', '\x2', '\x2', '\x2', '\xB7', 
		'y', '\x3', '\x2', '\x2', '\x2', '\xB7', '\x81', '\x3', '\x2', '\x2', 
		'\x2', '\xB7', '\x85', '\x3', '\x2', '\x2', '\x2', '\xB7', '\x89', '\x3', 
		'\x2', '\x2', '\x2', '\xB7', '\x92', '\x3', '\x2', '\x2', '\x2', '\xB7', 
		'\xA1', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xA7', '\x3', '\x2', '\x2', 
		'\x2', '\xB7', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xAE', '\x3', 
		'\x2', '\x2', '\x2', '\xB7', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB7', 
		'\xB5', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB6', '\x3', '\x2', '\x2', 
		'\x2', '\xB8', '\x13', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xBF', '\a', 
		'&', '\x2', '\x2', '\xBA', '\xBE', '\x5', '\b', '\x5', '\x2', '\xBB', 
		'\xBE', '\x5', '\n', '\x6', '\x2', '\xBC', '\xBE', '\x5', '\x12', '\n', 
		'\x2', '\xBD', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBB', '\x3', 
		'\x2', '\x2', '\x2', '\xBD', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBE', 
		'\xC1', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xBD', '\x3', '\x2', '\x2', 
		'\x2', '\xBF', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC2', '\x3', 
		'\x2', '\x2', '\x2', '\xC1', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xC2', 
		'\xC3', '\a', '\'', '\x2', '\x2', '\xC3', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\xC4', '\xC9', '\x5', '\x1E', '\x10', '\x2', '\xC5', '\xC6', '\a', 
		'-', '\x2', '\x2', '\xC6', '\xC8', '\x5', '\x1E', '\x10', '\x2', '\xC7', 
		'\xC5', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xCB', '\x3', '\x2', '\x2', 
		'\x2', '\xC9', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', '\x3', 
		'\x2', '\x2', '\x2', '\xCA', '\x17', '\x3', '\x2', '\x2', '\x2', '\xCB', 
		'\xC9', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xD1', '\x5', '\x1A', '\xE', 
		'\x2', '\xCD', '\xCE', '\a', '\x18', '\x2', '\x2', '\xCE', '\xD0', '\x5', 
		'\x1A', '\xE', '\x2', '\xCF', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xD0', 
		'\xD3', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xCF', '\x3', '\x2', '\x2', 
		'\x2', '\xD1', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xD2', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\xD3', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD4', 
		'\xD9', '\x5', '\x1C', '\xF', '\x2', '\xD5', '\xD6', '\a', '\x19', '\x2', 
		'\x2', '\xD6', '\xD8', '\x5', '\x1C', '\xF', '\x2', '\xD7', '\xD5', '\x3', 
		'\x2', '\x2', '\x2', '\xD8', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xD9', 
		'\xD7', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xDA', '\x3', '\x2', '\x2', 
		'\x2', '\xDA', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xD9', '\x3', 
		'\x2', '\x2', '\x2', '\xDC', '\xDD', '\x5', '\x1E', '\x10', '\x2', '\xDD', 
		'\xDE', '\x5', '(', '\x15', '\x2', '\xDE', '\xDF', '\x5', '\x1E', '\x10', 
		'\x2', '\xDF', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE2', '\a', 
		'\"', '\x2', '\x2', '\xE1', '\xE3', '\x5', '$', '\x13', '\x2', '\xE2', 
		'\xE1', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE3', '\x3', '\x2', '\x2', 
		'\x2', '\xE3', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xEF', '\x5', 
		' ', '\x11', '\x2', '\xE5', '\xEB', '\x5', ' ', '\x11', '\x2', '\xE6', 
		'\xE7', '\x5', '*', '\x16', '\x2', '\xE7', '\xE8', '\x5', ' ', '\x11', 
		'\x2', '\xE8', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xE6', '\x3', 
		'\x2', '\x2', '\x2', '\xEA', '\xED', '\x3', '\x2', '\x2', '\x2', '\xEB', 
		'\xE9', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xEC', '\x3', '\x2', '\x2', 
		'\x2', '\xEC', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEB', '\x3', 
		'\x2', '\x2', '\x2', '\xEE', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xEE', 
		'\xE5', '\x3', '\x2', '\x2', '\x2', '\xEF', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\xF0', '\xF6', '\x5', '\"', '\x12', '\x2', '\xF1', '\xF2', '\x5', 
		',', '\x17', '\x2', '\xF2', '\xF3', '\x5', '\"', '\x12', '\x2', '\xF3', 
		'\xF5', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF1', '\x3', '\x2', '\x2', 
		'\x2', '\xF5', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF4', '\x3', 
		'\x2', '\x2', '\x2', '\xF6', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xF7', 
		'!', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xF6', '\x3', '\x2', '\x2', 
		'\x2', '\xF9', '\xFA', '\x5', '&', '\x14', '\x2', '\xFA', '\xFC', '\a', 
		'(', '\x2', '\x2', '\xFB', '\xFD', '\x5', '\x16', '\f', '\x2', '\xFC', 
		'\xFB', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xFD', '\x3', '\x2', '\x2', 
		'\x2', '\xFD', '\xFE', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFF', '\a', 
		')', '\x2', '\x2', '\xFF', '\x112', '\x3', '\x2', '\x2', '\x2', '\x100', 
		'\x112', '\x5', '&', '\x14', '\x2', '\x101', '\x112', '\a', '/', '\x2', 
		'\x2', '\x102', '\x112', '\a', '\x30', '\x2', '\x2', '\x103', '\x112', 
		'\a', '\x33', '\x2', '\x2', '\x104', '\x112', '\a', '\x31', '\x2', '\x2', 
		'\x105', '\x112', '\a', '\x32', '\x2', '\x2', '\x106', '\x112', '\a', 
		'\xE', '\x2', '\x2', '\x107', '\x108', '\a', '\f', '\x2', '\x2', '\x108', 
		'\x109', '\x5', '\x10', '\t', '\x2', '\x109', '\x10A', '\a', '*', '\x2', 
		'\x2', '\x10A', '\x10B', '\x5', '\x1E', '\x10', '\x2', '\x10B', '\x10C', 
		'\a', '+', '\x2', '\x2', '\x10C', '\x112', '\x3', '\x2', '\x2', '\x2', 
		'\x10D', '\x10E', '\a', '(', '\x2', '\x2', '\x10E', '\x10F', '\x5', '\x1E', 
		'\x10', '\x2', '\x10F', '\x110', '\a', ')', '\x2', '\x2', '\x110', '\x112', 
		'\x3', '\x2', '\x2', '\x2', '\x111', '\xF9', '\x3', '\x2', '\x2', '\x2', 
		'\x111', '\x100', '\x3', '\x2', '\x2', '\x2', '\x111', '\x101', '\x3', 
		'\x2', '\x2', '\x2', '\x111', '\x102', '\x3', '\x2', '\x2', '\x2', '\x111', 
		'\x103', '\x3', '\x2', '\x2', '\x2', '\x111', '\x104', '\x3', '\x2', '\x2', 
		'\x2', '\x111', '\x105', '\x3', '\x2', '\x2', '\x2', '\x111', '\x106', 
		'\x3', '\x2', '\x2', '\x2', '\x111', '\x107', '\x3', '\x2', '\x2', '\x2', 
		'\x111', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x112', '#', '\x3', '\x2', 
		'\x2', '\x2', '\x113', '\x114', '\a', '(', '\x2', '\x2', '\x114', '\x115', 
		'\x5', '\x10', '\t', '\x2', '\x115', '\x116', '\a', ')', '\x2', '\x2', 
		'\x116', '%', '\x3', '\x2', '\x2', '\x2', '\x117', '\x120', '\a', '\x34', 
		'\x2', '\x2', '\x118', '\x119', '\a', '.', '\x2', '\x2', '\x119', '\x11F', 
		'\a', '\x34', '\x2', '\x2', '\x11A', '\x11B', '\a', '*', '\x2', '\x2', 
		'\x11B', '\x11C', '\x5', '\x1E', '\x10', '\x2', '\x11C', '\x11D', '\a', 
		'+', '\x2', '\x2', '\x11D', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x11E', 
		'\x118', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x11A', '\x3', '\x2', '\x2', 
		'\x2', '\x11F', '\x122', '\x3', '\x2', '\x2', '\x2', '\x120', '\x11E', 
		'\x3', '\x2', '\x2', '\x2', '\x120', '\x121', '\x3', '\x2', '\x2', '\x2', 
		'\x121', '\'', '\x3', '\x2', '\x2', '\x2', '\x122', '\x120', '\x3', '\x2', 
		'\x2', '\x2', '\x123', '\x124', '\t', '\x3', '\x2', '\x2', '\x124', ')', 
		'\x3', '\x2', '\x2', '\x2', '\x125', '\x126', '\t', '\x4', '\x2', '\x2', 
		'\x126', '+', '\x3', '\x2', '\x2', '\x2', '\x127', '\x128', '\t', '\x5', 
		'\x2', '\x2', '\x128', '-', '\x3', '\x2', '\x2', '\x2', '\x129', '\x12A', 
		'\a', '\r', '\x2', '\x2', '\x12A', '\x12B', '\a', '(', '\x2', '\x2', '\x12B', 
		'\x12E', '\x5', '\x1E', '\x10', '\x2', '\x12C', '\x12D', '\a', '-', '\x2', 
		'\x2', '\x12D', '\x12F', '\a', '/', '\x2', '\x2', '\x12E', '\x12C', '\x3', 
		'\x2', '\x2', '\x2', '\x12E', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x12F', 
		'\x130', '\x3', '\x2', '\x2', '\x2', '\x130', '\x131', '\a', ')', '\x2', 
		'\x2', '\x131', '\x132', '\a', ',', '\x2', '\x2', '\x132', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x1F', '\x33', '\x41', '\x43', 'L', 'Z', '_', 'l', 
		'r', '|', '\x90', '\x95', '\x99', '\x9D', '\xAB', '\xB7', '\xBD', '\xBF', 
		'\xC9', '\xD1', '\xD9', '\xE2', '\xEB', '\xEE', '\xF6', '\xFC', '\x111', 
		'\x11E', '\x120', '\x12E',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
